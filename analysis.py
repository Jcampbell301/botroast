import requests
import json
import numpy as np
import pandas as pd
import argparse
import matplotlib.pyplot as plt
import seaborn as sns
import datetime

global ACCESS_TOKEN	
global GROUP_ID
global MSG

URL = 'https://api.groupme.com/v3/'

ACCESS_TOKEN = ''
GROUP_ID = -1

def get_all_msg(acc_tok=ACCESS_TOKEN, gid=GROUP_ID):
	# First pass
	r = requests.get(URL + 'groups/' + str(gid) + '/messages?token=' + acc_tok + '&limit=100')
	MSG = r.json()['response']['messages']

	last_msg = MSG[-1]
	last_msg_id = last_msg['id']
	
	r = requests.get(URL + 'groups/' + str(gid) + '/messages?token=' + acc_tok + '&limit=100&before_id=' + str(last_msg_id))
	while r.status_code != 304:
		MSG = MSG + r.json()['response']['messages']

		last_msg = MSG[-1]
		last_msg_id = last_msg['id']
		r = requests.get(URL + 'groups/' + str(gid) + '/messages?token=' + acc_tok + '&limit=100&before_id=' + str(last_msg_id))
	return MSG

def get_activity(MSG):
	freq = {}
	num_words = {}
	name_id = {}
	got_like = {}
	gave_like = {}
	max_day = {}
	month = {1:0, 2:0, 3:0, 4:0, 5:0, 6:0, 7:0, 8:0, 9:0, 10:0, 11:0, 12:0}
	hour = {0:0, 1:0, 2:0, 3:0, 4:0, 5:0, 6:0, 7:0, 8:0, 9:0, 10:0, 11:0, 12:0, 13:0, 14:0, 15:0, 16:0, 17:0, 18:0, 19:0, 20:0, 21:0, 22:0, 23:0}
	
	curr_date = datetime.datetime.fromtimestamp(MSG[0]['created_at'])
	msg_counter = {}
	max_msg = {}
	
	for msg in MSG:
		msg_date = datetime.datetime.fromtimestamp(msg['created_at'])
		month[msg_date.month] += 1
		hour[msg_date.hour] += 1
		
		#Messages from previous day before curr_date (since traversing backward) => Must update max and reset activity counters for each member
		if msg_date.date() < curr_date.date():
			for member in max_msg.keys():
				if msg_counter[member] > max_msg[member]:
					max_day[member] = curr_date.date()
					max_msg[member] = msg_counter[member]
			for member in msg_counter.keys():
				msg_counter[member] = 1
			curr_date = msg_date
				
		# First post by a user. Need to initialize user into stat dictionaries
		if msg['user_id'] not in freq.keys():
			freq[msg['user_id']] = 1
			name_id[msg['user_id']] = msg['name']
			num_words[msg['user_id']] = 0
			max_day[msg['user_id']] = curr_date.date()
			msg_counter[msg['user_id']] = 1
			max_msg[msg['user_id']] = 1
			
			if msg['text'] is not None:
				num_words[msg['user_id']] = msg['text'].count(' ')+1 
			
			got_like[msg['user_id']] = len(msg['favorited_by'])
			
			for id in msg['favorited_by']:
				if id not in gave_like.keys():
					gave_like[id] = 1
				else:
					gave_like[id] += 1
		else: # This user has posted before. Only need to update and not initialize 
			freq[msg['user_id']] += 1
			if msg['text'] is not None:
				num_words[msg['user_id']] += (msg['text'].count(' ')+1)
			
			got_like[msg['user_id']] += len(msg['favorited_by'])
			msg_counter[msg['user_id']] += 1
			
			for id in msg['favorited_by']:
				if id not in gave_like.keys():
					gave_like[id] = 1
				else:
					gave_like[id] += 1
			
	activity_df = pd.DataFrame([name_id, freq, num_words, got_like, gave_like, max_day, max_msg]).T
	activity_df.columns = ['Member', 'Message Frequency', 'Words', 'Likes Received', 'Likes Given', 'Day of Maximum Activity', 'Max Messages Sent in 1 Day']
	activity_df['Words per Message'] = activity_df['Words'].divide(activity_df['Message Frequency'])
	activity_df['Likes per Message'] = activity_df['Likes Received'].divide(activity_df['Message Frequency'])
	activity_df['Likes Received to Likes Given'] = activity_df['Likes Received'].divide(activity_df['Likes Given'])
	
	return [activity_df, month, hour]

def analyze(acc_tok, gid):
	# parser = argparse.ArgumentParser(description = 'Conducts stastical analysis on a GroupMe Group Chat.')
	# parser.add_argument('acc_tok', type=str, help = 'Must pass a valid access token generated by GroupMe.')
	# parser.add_argument('gid', type=int, help = 'Must pass a valid group id of a group which you are currently a member of. Can be found under Settings of a Group in GroupMe.')
	# arg = parser.parse_args()
	
	# ACCESS_TOKEN = arg.acc_tok
	# GROUP_ID = arg.gid
	
	
	ACCESS_TOKEN = acc_tok
	GROUP_ID = gid
	
	ALL_MSG = get_all_msg(ACCESS_TOKEN, GROUP_ID)
	
	results = get_activity(ALL_MSG)
	activity_df = results[0]
	month_act = results[1]
	hours_act = results[2]
	

	print('Total Number of Messages: ' + str(activity_df['Message Frequency'].sum()))
	print('Total Number of Words: ' + str(activity_df['Words'].sum()))
	print('Total Likes: ' + str(activity_df['Likes Received'].sum()))
	print('Total Days: ' + str((datetime.datetime.fromtimestamp(ALL_MSG[0]['created_at'])-datetime.datetime.fromtimestamp(ALL_MSG[-1]['created_at'])).days))
	print(activity_df.to_string())
	
	f, ax = plt.subplots(3, 2)
	activity_df.plot(kind='bar', x='Member', y='Message Frequency', colormap='Set2', legend=False, ax=ax[0, 0])
	ax[0,0].set_ylabel('Message Frequency')
	ax[0,0].set_title('Message Frequency by Member')
	
	activity_df.plot(kind='bar', x='Member', y='Words per Message', colormap='Set2', legend=False, ax=ax[0,1])
	ax[0,1].set_ylabel('Words per Message')
	ax[0,1].set_title('Words per Message by Member')
	
	activity_df.plot(kind='bar', x='Member', y='Likes Received', colormap='Set2', legend=False, ax=ax[1,0])
	ax[1,0].set_ylabel('Likes Received')
	ax[1,0].set_title('Likes Received by Member')
	
	activity_df.plot(kind='bar', x='Member', y='Likes Given', colormap='Set2', legend=False, ax=ax[1,1])
	ax[1,1].set_ylabel('Likes Given')
	ax[1,1].set_title('Likes Given by Member')
	
	activity_df.plot(kind='bar', x='Member', y='Likes per Message', colormap='Set2', legend=False, ax=ax[2,0])
	ax[2,0].set_ylabel('Likes per Message')
	ax[2,0].set_title('Likes per Message by Member')
	
	activity_df.plot(kind='bar', x='Member', y='Likes Received to Likes Given', colormap='Set2', legend=False, ax=ax[2,1])
	ax[2,1].set_ylabel('Likes Received to Likes Given')
	ax[2,1].set_title('Likes Received to Likes Given Ratio by Member')
	
	plt.show()
	
	f2, ax2 = plt.subplots(2)
	
	ax2[0].plot(month_act.keys(), month_act.values())
	ax2[0].set_xlabel('Month')
	ax2[0].set_ylabel('Activity (Messages)')
	ax2[0].set_xticks(range(1, 13))
	
	ax2[1].plot(hours_act.keys(), hours_act.values())
	ax2[1].set_xlabel('Hour of the Day')
	ax2[1].set_ylabel('Activity (Messages)')
	ax2[1].set_xticks(range(24))
	
	plt.show()

if __name__ == '__main__':
	parser = argparse.ArgumentParser(description = 'Conducts stastical analysis on a GroupMe Group Chat.')
	parser.add_argument('acc_tok', type=str, help = 'Must pass a valid access token generated by GroupMe.')
	parser.add_argument('gid', type=int, help = 'Must pass a valid group id of a group which you are currently a member of. Can be found under Settings of a Group in GroupMe.')
	arg = parser.parse_args()
	
	ACCESS_TOKEN = arg.acc_tok
	GROUP_ID = arg.gid
	analyze(ACCESS_TOKEN, GROUP_ID)