import requests
import json
import numpy as np
import pandas as pd
import argparse
import matplotlib.pyplot as plt
import seaborn as sns

global ACCESS_TOKEN	
global GROUP_ID
global MSG

	
	#19428404 = group id of Alper Chicas
	# Dgcz04XHliG6cChhLva8TIUEjtglegtCois0pCeT = Access Token for Subhodh Kotekal

URL = 'https://api.groupme.com/v3/'

ACCESS_TOKEN = ''
GROUP_ID = -1

def get_messages(limit, acc_tok=ACCESS_TOKEN, gid=GROUP_ID):
	r = requests.get(URL + 'groups/' + str(gid) + '/messages?token=' + acc_tok + '&limit=' + str(limit))
	MSG = r.json()

def get_all_msg(acc_tok=ACCESS_TOKEN, gid=GROUP_ID):
	# First pass
	r = requests.get(URL + 'groups/' + str(gid) + '/messages?token=' + acc_tok + '&limit=100')
	MSG = r.json()['response']['messages']

	last_msg = MSG[-1]
	last_msg_id = last_msg['id']
	
	r = requests.get(URL + 'groups/' + str(gid) + '/messages?token=' + acc_tok + '&limit=100&before_id=' + str(last_msg_id))
	while r.status_code != 304:
		MSG = MSG + r.json()['response']['messages']

		last_msg = MSG[-1]
		last_msg_id = last_msg['id']
		r = requests.get(URL + 'groups/' + str(gid) + '/messages?token=' + acc_tok + '&limit=100&before_id=' + str(last_msg_id))
	return MSG

def get_activity(MSG):
	freq = {}
	num_words = {}
	name_id = {}
	got_like = {}
	gave_like = {}
	
	for msg in MSG:
		
		# First post by a user. Need to initialize user into stat dictionaries
		if msg['user_id'] not in freq.keys():
			freq[msg['user_id']] = 1
			name_id[msg['user_id']] = msg['name']
			num_words[msg['user_id']] = 0
			if msg['text'] is not None:
				num_words[msg['user_id']] = msg['text'].count(' ') 
			
			got_like[msg['user_id']] = len(msg['favorited_by'])
			
			for id in msg['favorited_by']:
				if id not in gave_like.keys():
					gave_like[id] = 1
				else:
					gave_like[id] += 1
		else: # This user has posted before. Only need to update and not initialize 
			freq[msg['user_id']] += 1
			if msg['text'] is not None:
				num_words[msg['user_id']] += msg['text'].count(' ')
			
			got_like[msg['user_id']] += len(msg['favorited_by'])
			
			for id in msg['favorited_by']:
				if id not in gave_like.keys():
					gave_like[id] = 1
				else:
					gave_like[id] += 1
			
				
	return [name_id, freq, num_words, got_like, gave_like]

if __name__ == '__main__':

	parser = argparse.ArgumentParser(description = 'Conducts stastical analysis on a GroupMe Group Chat.')
	parser.add_argument('acc_tok', type=str, help = 'Must pass a valid access token generated by GroupMe.')
	parser.add_argument('gid', type=int, help = 'Must pass a valid group id of a group which you are currently a member of. Can be found under Settings of a Group in GroupMe.')
	arg = parser.parse_args()
	
	ACCESS_TOKEN = arg.acc_tok
	GROUP_ID = arg.gid
	
	# print(json.dumps(get_messages(5), indent=4))
	
	ALL_MSG = get_all_msg(ACCESS_TOKEN, GROUP_ID)
	
	activity_df = pd.DataFrame(get_activity(ALL_MSG)).T
	activity_df.columns = ['Member', 'Message Frequency', 'Words', 'Likes Received', 'Likes Given']
	activity_df['Words per Message'] = activity_df['Words'].divide(activity_df['Message Frequency'])
	activity_df['Likes per Message'] = activity_df['Likes Received'].divide(activity_df['Message Frequency'])
	activity_df['Likes Received to Likes Given'] = activity_df['Likes Received'].divide(activity_df['Likes Given'])
	
	print('Total Number of Messages: ' + str(activity_df['Message Frequency'].sum()))
	print('Total Number of Words: ' + str(activity_df['Words'].sum()))
	print('Total Likes: ' + str(activity_df['Likes Received'].sum()))
	print(activity_df)
	
	f, ax = plt.subplots(3, 2)
	activity_df.plot(kind='bar', x='Member', y='Message Frequency', colormap='Set2', legend=False, ax=ax[0, 0])
	ax[0,0].set_ylabel('Message Frequency')
	ax[0,0].set_title('Message Frequency by Member')
	
	activity_df.plot(kind='bar', x='Member', y='Words per Message', colormap='Set2', legend=False, ax=ax[0,1])
	ax[0,1].set_ylabel('Words per Message')
	ax[0,1].set_title('Words per Message by Member')
	
	activity_df.plot(kind='bar', x='Member', y='Likes Received', colormap='Set2', legend=False, ax=ax[1,0])
	ax[1,0].set_ylabel('Likes Received')
	ax[1,0].set_title('Likes Received by Member')
	
	activity_df.plot(kind='bar', x='Member', y='Likes Given', colormap='Set2', legend=False, ax=ax[1,1])
	ax[1,1].set_ylabel('Likes Given')
	ax[1,1].set_title('Likes Given by Member')
	
	activity_df.plot(kind='bar', x='Member', y='Likes per Message', colormap='Set2', legend=False, ax=ax[2,0])
	ax[2,0].set_ylabel('Likes per Message')
	ax[2,0].set_title('Likes per Message by Member')
	
	activity_df.plot(kind='bar', x='Member', y='Likes Received to Likes Given', colormap='Set2', legend=False, ax=ax[2,1])
	ax[2,1].set_ylabel('Likes Received to Likes Given')
	ax[2,1].set_title('Likes Received to Likes Given Ratio by Member')
	
	plt.show()